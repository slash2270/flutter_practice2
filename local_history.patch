Index: lib/widget/audio_player_widget.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/widget/audio_player_widget.dart b/lib/widget/audio_player_widget.dart
--- a/lib/widget/audio_player_widget.dart	
+++ b/lib/widget/audio_player_widget.dart	(date 1657009461058)
@@ -7,6 +7,7 @@
 import 'package:audioplayer/audioplayer.dart';
 import 'package:flutter/foundation.dart';
 import 'package:flutter/material.dart';
+import 'package:flutter_practice2/util/function_util.dart';
 import 'package:http/http.dart';
 import 'package:path_provider/path_provider.dart';
 
@@ -22,30 +23,33 @@
 }
 
 class _AudioPlayerWidgetState extends State<AudioPlayerWidget> {
-  Duration duration;
-  Duration position;
+  Duration _duration;
+  Duration _position;
 
-  AudioPlayer audioPlayer;
+  AudioPlayer _audioPlayer;
 
-  String localFilePath;
+  String _localFilePath;
 
   PlayerState playerState = PlayerState.stopped;
 
   get isPlaying => playerState == PlayerState.playing;
   get isPaused => playerState == PlayerState.paused;
-  get durationText => duration != null ? duration.toString().split('.').first : '';
-  get positionText => position != null ? position.toString().split('.').first : '';
+  get durationText => _duration != null ? _duration.toString().split('.').first : '';
+  get positionText => _position != null ? _position.toString().split('.').first : '';
 
-  bool isMuted = false;
+  bool _isMuted = false;
 
   StreamSubscription _positionSubscription;
   StreamSubscription _audioPlayerStateSubscription;
+  
+  FunctionUtil _functionUtil;
 
   final kUrl = "https://www.mediacollege.com/downloads/sound-effects/nature/forest/rainforest-ambient.mp3";
 
   @override
   void initState() {
     super.initState();
+    _functionUtil = FunctionUtil();
     initAudioPlayer();
   }
 
@@ -53,62 +57,62 @@
   void dispose() {
     _positionSubscription.cancel();
     _audioPlayerStateSubscription.cancel();
-    audioPlayer.stop();
+    _audioPlayer.stop();
     super.dispose();
   }
 
   void initAudioPlayer() {
-    audioPlayer = AudioPlayer();
-    _positionSubscription = audioPlayer.onAudioPositionChanged
-        .listen((p) => setState(() => position = p));
+    _audioPlayer = AudioPlayer();
+    _positionSubscription = _audioPlayer.onAudioPositionChanged
+        .listen((p) => setState(() => _position = p));
     _audioPlayerStateSubscription =
-        audioPlayer.onPlayerStateChanged.listen((s) {
+        _audioPlayer.onPlayerStateChanged.listen((s) {
           if (s == AudioPlayerState.PLAYING) {
-            setState(() => duration = audioPlayer.duration);
+            setState(() => _duration = _audioPlayer.duration);
           } else if (s == AudioPlayerState.STOPPED) {
             onComplete();
             setState(() {
-              position = duration;
+              _position = _duration;
             });
           }
         }, onError: (msg) {
           setState(() {
             playerState = PlayerState.stopped;
-            duration = Duration(seconds: 0);
-            position = Duration(seconds: 0);
+            _duration = const Duration(seconds: 0);
+            _position = const Duration(seconds: 0);
           });
         });
   }
 
   Future play() async {
-    await audioPlayer.play(kUrl);
+    await _audioPlayer.play(kUrl);
     setState(() {
       playerState = PlayerState.playing;
     });
   }
 
   Future _playLocal() async {
-    await audioPlayer.play(localFilePath, isLocal: true);
+    await _audioPlayer.play(_localFilePath, isLocal: true);
     setState(() => playerState = PlayerState.playing);
   }
 
   Future pause() async {
-    await audioPlayer.pause();
+    await _audioPlayer.pause();
     setState(() => playerState = PlayerState.paused);
   }
 
   Future stop() async {
-    await audioPlayer.stop();
+    await _audioPlayer.stop();
     setState(() {
       playerState = PlayerState.stopped;
-      position = Duration();
+      _position = const Duration();
     });
   }
 
   Future mute(bool muted) async {
-    await audioPlayer.mute(muted);
+    await _audioPlayer.mute(muted);
     setState(() {
-      isMuted = muted;
+      _isMuted = muted;
     });
   }
 
@@ -132,10 +136,11 @@
     final file = File('${dir.path}/audio.mp3');
 
     await file.writeAsBytes(bytes);
-    if (await file.exists())
+    if (await file.exists()) {
       setState(() {
-        localFilePath = file.path;
+        _localFilePath = file.path;
       });
+    }
   }
 
   @override
@@ -153,7 +158,7 @@
             ),
             Material(child: _buildPlayer()),
             if (!kIsWeb)
-              localFilePath != null ? Text(localFilePath) : Container(),
+              _localFilePath != null ? Text(_localFilePath) : Container(),
             if (!kIsWeb)
               Padding(
                 padding: const EdgeInsets.all(8.0),
@@ -164,7 +169,7 @@
                       onPressed: () => _loadFile(),
                       child: Text('下載'),
                     ),
-                    if (localFilePath != null)
+                    if (_localFilePath != null)
                       RaisedButton(
                         onPressed: () => _playLocal(),
                         child: Text('本機播放'),
@@ -184,6 +189,7 @@
       mainAxisSize: MainAxisSize.min,
       children: [
         Row(mainAxisSize: MainAxisSize.min, children: [
+          _functionUtil.initIcon
           IconButton(
             onPressed: isPlaying ? null : () => play(),
             iconSize: 64.0,
@@ -203,16 +209,16 @@
             color: Colors.cyan,
           ),
         ]),
-        if (duration != null)
+        if (_duration != null)
           Slider(
-              value: position?.inMilliseconds?.toDouble() ?? 0.0,
+              value: _position?.inMilliseconds?.toDouble() ?? 0.0,
               onChanged: (double value) {
-                return audioPlayer.seek((value / 1000).roundToDouble());
+                return _audioPlayer.seek((value / 1000).roundToDouble());
               },
               min: 0.0,
-              max: duration.inMilliseconds.toDouble()),
-        if (position != null) _buildMuteButtons(),
-        if (position != null) _buildProgressView()
+              max: _duration.inMilliseconds.toDouble()),
+        if (_position != null) _buildMuteButtons(),
+        if (_position != null) _buildProgressView()
       ],
     ),
   );
@@ -221,18 +227,18 @@
     Padding(
       padding: EdgeInsets.all(12.0),
       child: CircularProgressIndicator(
-        value: position != null && position.inMilliseconds > 0
-            ? (position?.inMilliseconds?.toDouble() ?? 0.0) /
-            (duration?.inMilliseconds?.toDouble() ?? 0.0)
+        value: _position != null && _position.inMilliseconds > 0
+            ? (_position?.inMilliseconds?.toDouble() ?? 0.0) /
+            (_duration?.inMilliseconds?.toDouble() ?? 0.0)
             : 0.0,
         valueColor: AlwaysStoppedAnimation(Colors.cyan),
         backgroundColor: Colors.grey.shade400,
       ),
     ),
     Text(
-      position != null
+      _position != null
           ? "${positionText ?? ''} / ${durationText ?? ''}"
-          : duration != null ? durationText : '',
+          : _duration != null ? durationText : '',
       style: TextStyle(fontSize: 24.0),
     )
   ]);
@@ -241,7 +247,7 @@
     return Row(
       mainAxisAlignment: MainAxisAlignment.spaceEvenly,
       children: <Widget>[
-        if (!isMuted)
+        if (!_isMuted)
           FlatButton.icon(
             onPressed: () => mute(true),
             icon: Icon(
@@ -250,7 +256,7 @@
             ),
             label: Text('Mute', style: TextStyle(color: Colors.cyan)),
           ),
-        if (isMuted)
+        if (_isMuted)
           FlatButton.icon(
             onPressed: () => mute(false),
             icon: Icon(Icons.headset, color: Colors.cyan),
